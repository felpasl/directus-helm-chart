# Default values for directus.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: directus/directus
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "9.26"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

publicUrl: "http://localhost:8080"
ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          backend:
            serviceName: chart-example.local
            servicePort: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

extraEnvVars:
  {}
  # An array to add extra environment variables
  # E.g.
  # extraEnvVars:
  #  - name: STORAGE_LOCATIONS
  #    value: "s3"

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

mariadb:
  enabled: true

  ## MariaDB architecture. Allowed values: standalone or replication
  ##
  architecture: standalone

  ## MariaDB Authentication parameters
  ##
  auth:
    ## MariaDB root password
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb#setting-the-root-password-on-first-run
    ##
    rootPassword: ""
    ## MariaDB custom user and database
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-on-first-run
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-user-on-first-run
    ##
    database: my_database
    username: ""
    password: ""
    ## MariaDB replication user and password
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb#setting-up-a-replication-cluster
    ##
    replicationUser: replicator
    replicationPassword: ""
    ## Existing secret with MariaDB credentials
    ## NOTE: When it's set the previous parameters are ignored.
    ##
    # existingSecret: name-of-existing-secret
    ## Force users to specify required passwords
    ##
    forcePassword: false
    ## Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: false
    ## Use custom secret files other than chart provided when usePasswordFiles is set to "true"
    ## Example:
    ## customPasswordFiles:
    ##   root: /vault/secrets/mariadb-root
    ##   user: /vault/secrets/mariadb-user
    ##   replicator: /vault/secrets/mariadb-replicator
    ##
    customPasswordFiles: {}

redis:
  enabled: true
